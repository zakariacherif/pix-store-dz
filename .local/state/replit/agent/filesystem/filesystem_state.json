{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# E-commerce Product Management System\n\n## Overview\n\nThis is a full-stack e-commerce application built with Express.js, React, and PostgreSQL. The system provides a customer-facing storefront for browsing and ordering products, along with an admin panel for managing inventory, orders, and delivery pricing. The application is specifically designed for the Algerian market, featuring province-based (wilaya) delivery pricing and localized content.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **Styling**: Tailwind CSS with shadcn/ui component library\n- **State Management**: TanStack Query for server state management, local state for cart functionality\n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tool**: Vite for fast development and optimized builds\n\n### Backend Architecture\n- **Server**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Session-based authentication using express-session with PostgreSQL storage\n- **API Design**: RESTful API with separate routes for public and admin endpoints\n- **Error Handling**: Centralized error handling middleware\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **Session Storage**: PostgreSQL sessions table for authentication persistence\n- **Schema Management**: Drizzle migrations for database versioning\n- **Connection Pooling**: Neon serverless connection pooling for optimal performance\n\n### Authentication and Authorization\n- **Admin Authentication**: Session-based with bcrypt password hashing\n- **Session Management**: PostgreSQL-backed sessions with configurable TTL\n- **Route Protection**: Middleware-based authentication checks for admin endpoints\n- **Security**: HTTP-only cookies, CSRF protection considerations\n\n### Key Data Models\n- **Products**: Inventory management with categories, pricing, stock levels, and active status\n- **Orders**: Complete order lifecycle with customer information, items, and status tracking\n- **Wilayas**: Algerian provinces with customizable delivery pricing\n- **Admins**: Administrative users with email/password authentication\n\n### External Dependencies\n\n- **Database**: Neon PostgreSQL serverless database\n- **UI Components**: Radix UI primitives through shadcn/ui\n- **Fonts**: Google Fonts integration (Inter, Architects Daughter, DM Sans, Fira Code, Geist Mono)\n- **Development**: Replit-specific tooling and error overlay for development environment\n- **Build Tools**: ESBuild for server bundling, Vite for client bundling\n\n### Architecture Decisions\n\n**Monorepo Structure**: Single repository with separate client, server, and shared directories for type safety and code reuse across frontend and backend.\n\n**Session vs JWT Authentication**: Sessions chosen for better security with automatic expiration and server-side revocation capabilities, stored in PostgreSQL for scalability.\n\n**Drizzle ORM**: Selected for excellent TypeScript integration, migration system, and performance over alternatives like Prisma for this use case.\n\n**Separate Admin Interface**: Admin functionality isolated in dedicated routes and components to maintain clear separation of concerns and security boundaries.\n\n**Province-based Delivery**: Custom wilaya system designed specifically for Algerian market requirements with flexible delivery pricing per region.\n\n**Real-time Cart Management**: Client-side cart state with localStorage persistence to maintain shopping experience across sessions without requiring user authentication.","size_bytes":3673},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          dark: \"var(--primary-dark)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        coral: \"var(--coral)\",\n        \"orange-light\": \"var(--orange-light)\",\n      },\n      fontFamily: {\n        inter: [\"Inter\", \"sans-serif\"],\n        sans: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2224},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProductSchema, insertWilayaSchema, type CreateOrderRequest, wilayas } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { db } from \"./db\";\n\n// Session configuration\nconst sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\nconst pgStore = connectPg(session);\n\nconst sessionStore = new pgStore({\n  conString: process.env.DATABASE_URL,\n  createTableIfMissing: false,\n  ttl: sessionTtl,\n  tableName: \"sessions\",\n});\n\nconst sessionMiddleware = session({\n  secret: process.env.SESSION_SECRET || \"fallback-secret-key\",\n  store: sessionStore,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === \"production\",\n    maxAge: sessionTtl,\n  },\n});\n\n// Extend session interface\ndeclare module \"express-session\" {\n  interface SessionData {\n    adminId?: string;\n  }\n}\n\n// Auth middleware\nconst isAuthenticated = (req: any, res: any, next: any) => {\n  if (req.session && req.session.adminId) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};\n\n// Validation schemas\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nconst orderSchema = z.object({\n  customerName: z.string().min(1),\n  customerPhone: z.string().min(1),\n  wilayaId: z.string().min(1),\n  address: z.string().optional(),\n  items: z.array(z.object({\n    productId: z.string().min(1),\n    quantity: z.number().min(1),\n  })).min(1),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware\n  app.use(sessionMiddleware);\n\n  // Initialize admin user if not exists\n  const initAdmin = async () => {\n    try {\n      const existingAdmin = await storage.getAdminByEmail(\"cherif.zakaria2019@gmail.com\");\n      if (!existingAdmin) {\n        const hashedPassword = await bcrypt.hash(\"Cmz.0665397175\", 10);\n        await storage.createAdmin({\n          email: \"cherif.zakaria2019@gmail.com\",\n          password: hashedPassword,\n        });\n      }\n    } catch (error) {\n      console.error(\"Error initializing admin:\", error);\n    }\n  };\n\n  // Initialize all 58 Algerian wilayas\n  const initWilayas = async () => {\n    try {\n      const existingWilayas = await storage.getWilayas();\n      if (existingWilayas.length === 0) {\n        const algerianWilayas = [\n          { code: \"01\", name: \"Adrar\", deliveryPrice: \"800\" },\n          { code: \"02\", name: \"Chlef\", deliveryPrice: \"500\" },\n          { code: \"03\", name: \"Laghouat\", deliveryPrice: \"700\" },\n          { code: \"04\", name: \"Oum El Bouaghi\", deliveryPrice: \"600\" },\n          { code: \"05\", name: \"Batna\", deliveryPrice: \"650\" },\n          { code: \"06\", name: \"BÃ©jaÃ¯a\", deliveryPrice: \"550\" },\n          { code: \"07\", name: \"Biskra\", deliveryPrice: \"700\" },\n          { code: \"08\", name: \"BÃ©char\", deliveryPrice: \"900\" },\n          { code: \"09\", name: \"Blida\", deliveryPrice: \"350\" },\n          { code: \"10\", name: \"Bouira\", deliveryPrice: \"400\" },\n          { code: \"11\", name: \"Tamanrasset\", deliveryPrice: \"1000\" },\n          { code: \"12\", name: \"TÃ©bessa\", deliveryPrice: \"750\" },\n          { code: \"13\", name: \"Tlemcen\", deliveryPrice: \"600\" },\n          { code: \"14\", name: \"Tiaret\", deliveryPrice: \"550\" },\n          { code: \"15\", name: \"Tizi Ouzou\", deliveryPrice: \"450\" },\n          { code: \"16\", name: \"Alger\", deliveryPrice: \"300\" },\n          { code: \"17\", name: \"Djelfa\", deliveryPrice: \"650\" },\n          { code: \"18\", name: \"Jijel\", deliveryPrice: \"600\" },\n          { code: \"19\", name: \"SÃ©tif\", deliveryPrice: \"550\" },\n          { code: \"20\", name: \"SaÃ¯da\", deliveryPrice: \"650\" },\n          { code: \"21\", name: \"Skikda\", deliveryPrice: \"650\" },\n          { code: \"22\", name: \"Sidi Bel AbbÃ¨s\", deliveryPrice: \"600\" },\n          { code: \"23\", name: \"Annaba\", deliveryPrice: \"700\" },\n          { code: \"24\", name: \"Guelma\", deliveryPrice: \"650\" },\n          { code: \"25\", name: \"Constantine\", deliveryPrice: \"600\" },\n          { code: \"26\", name: \"MÃ©dÃ©a\", deliveryPrice: \"450\" },\n          { code: \"27\", name: \"Mostaganem\", deliveryPrice: \"550\" },\n          { code: \"28\", name: \"M'Sila\", deliveryPrice: \"650\" },\n          { code: \"29\", name: \"Mascara\", deliveryPrice: \"600\" },\n          { code: \"30\", name: \"Ouargla\", deliveryPrice: \"800\" },\n          { code: \"31\", name: \"Oran\", deliveryPrice: \"500\" },\n          { code: \"32\", name: \"El Bayadh\", deliveryPrice: \"700\" },\n          { code: \"33\", name: \"Illizi\", deliveryPrice: \"1000\" },\n          { code: \"34\", name: \"Bordj Bou ArrÃ©ridj\", deliveryPrice: \"550\" },\n          { code: \"35\", name: \"BoumerdÃ¨s\", deliveryPrice: \"400\" },\n          { code: \"36\", name: \"El Tarf\", deliveryPrice: \"750\" },\n          { code: \"37\", name: \"Tindouf\", deliveryPrice: \"1000\" },\n          { code: \"38\", name: \"Tissemsilt\", deliveryPrice: \"600\" },\n          { code: \"39\", name: \"El Oued\", deliveryPrice: \"750\" },\n          { code: \"40\", name: \"Khenchela\", deliveryPrice: \"700\" },\n          { code: \"41\", name: \"Souk Ahras\", deliveryPrice: \"700\" },\n          { code: \"42\", name: \"Tipaza\", deliveryPrice: \"400\" },\n          { code: \"43\", name: \"Mila\", deliveryPrice: \"650\" },\n          { code: \"44\", name: \"AÃ¯n Defla\", deliveryPrice: \"500\" },\n          { code: \"45\", name: \"NaÃ¢ma\", deliveryPrice: \"750\" },\n          { code: \"46\", name: \"AÃ¯n TÃ©mouchent\", deliveryPrice: \"600\" },\n          { code: \"47\", name: \"GhardaÃ¯a\", deliveryPrice: \"750\" },\n          { code: \"48\", name: \"Relizane\", deliveryPrice: \"550\" },\n          { code: \"49\", name: \"Timimoun\", deliveryPrice: \"900\" },\n          { code: \"50\", name: \"Bordj Badji Mokhtar\", deliveryPrice: \"1000\" },\n          { code: \"51\", name: \"Ouled Djellal\", deliveryPrice: \"700\" },\n          { code: \"52\", name: \"BÃ©ni AbbÃ¨s\", deliveryPrice: \"900\" },\n          { code: \"53\", name: \"In Salah\", deliveryPrice: \"1000\" },\n          { code: \"54\", name: \"In Guezzam\", deliveryPrice: \"1000\" },\n          { code: \"55\", name: \"Touggourt\", deliveryPrice: \"750\" },\n          { code: \"56\", name: \"Djanet\", deliveryPrice: \"1000\" },\n          { code: \"57\", name: \"El M'Ghair\", deliveryPrice: \"800\" },\n          { code: \"58\", name: \"El Meniaa\", deliveryPrice: \"800\" }\n        ];\n\n        for (const wilayaData of algerianWilayas) {\n          const [wilaya] = await db\n            .insert(wilayas)\n            .values({\n              code: wilayaData.code,\n              name: wilayaData.name,\n              deliveryPrice: wilayaData.deliveryPrice,\n            })\n            .returning();\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing wilayas:\", error);\n    }\n  };\n\n  await initAdmin();\n  await initWilayas();\n\n  // Public routes\n\n  // Get all products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  // Get single product\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Get all wilayas\n  app.get(\"/api/wilayas\", async (req, res) => {\n    try {\n      const wilayas = await storage.getWilayas();\n      res.json(wilayas);\n    } catch (error) {\n      console.error(\"Error fetching wilayas:\", error);\n      res.status(500).json({ message: \"Failed to fetch wilayas\" });\n    }\n  });\n\n  // Create order\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const orderData = orderSchema.parse(req.body);\n      const order = await storage.createOrder(orderData as CreateOrderRequest);\n      res.status(201).json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid order data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  // Admin authentication\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const admin = await storage.getAdminByEmail(email);\n      if (!admin) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, admin.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.adminId = admin.id;\n      res.json({ message: \"Login successful\", admin: { id: admin.id, email: admin.email } });\n    } catch (error) {\n      console.error(\"Error during login:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid login data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to login\" });\n    }\n  });\n\n  app.post(\"/api/admin/logout\", (req: any, res) => {\n    req.session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  app.get(\"/api/admin/profile\", isAuthenticated, async (req: any, res) => {\n    try {\n      const admin = await storage.getAdminByEmail(\"cherif.zakaria2019@gmail.com\");\n      if (!admin) {\n        return res.status(404).json({ message: \"Admin not found\" });\n      }\n      res.json({ id: admin.id, email: admin.email });\n    } catch (error) {\n      console.error(\"Error fetching admin profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  // Protected admin routes\n\n  // Analytics endpoint\n  app.get(\"/api/admin/analytics\", isAuthenticated, async (req: any, res) => {\n    try {\n      const products = await storage.getProducts();\n      const orders = await storage.getOrders();\n      \n      const totalProducts = products.length;\n      const totalOrders = orders.length;\n      const pendingOrders = orders.filter(order => order.status === \"pending\").length;\n      const totalRevenue = orders\n        .filter(order => order.status === \"delivered\")\n        .reduce((sum, order) => sum + parseFloat(order.total), 0);\n\n      res.json({\n        totalProducts,\n        totalOrders,\n        pendingOrders,\n        totalRevenue\n      });\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Products management\n  app.post(\"/api/admin/products\", isAuthenticated, async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/admin/products/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/admin/products/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteProduct(req.params.id);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Orders management\n  app.get(\"/api/admin/orders\", isAuthenticated, async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.put(\"/api/admin/orders/:id/status\", isAuthenticated, async (req, res) => {\n    try {\n      const { status } = req.body;\n      if (!status) {\n        return res.status(400).json({ message: \"Status is required\" });\n      }\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error updating order status:\", error);\n      res.status(500).json({ message: \"Failed to update order status\" });\n    }\n  });\n\n  // Delivery pricing management\n  app.put(\"/api/admin/wilayas/:id/delivery-price\", isAuthenticated, async (req, res) => {\n    try {\n      const { price } = req.body;\n      if (!price) {\n        return res.status(400).json({ message: \"Price is required\" });\n      }\n      const wilaya = await storage.updateWilayaDeliveryPrice(req.params.id, price);\n      res.json(wilaya);\n    } catch (error) {\n      console.error(\"Error updating delivery price:\", error);\n      res.status(500).json({ message: \"Failed to update delivery price\" });\n    }\n  });\n\n  // Category management\n  app.get(\"/api/admin/categories\", isAuthenticated, async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/admin/categories\", isAuthenticated, async (req, res) => {\n    try {\n      const { name } = req.body;\n      if (!name || typeof name !== 'string' || name.trim().length === 0) {\n        return res.status(400).json({ message: \"Category name is required\" });\n      }\n      \n      const categoryName = name.trim().toLowerCase();\n      const categories = await storage.getCategories();\n      \n      if (categories.includes(categoryName)) {\n        return res.status(409).json({ message: \"Category already exists\" });\n      }\n      \n      await storage.createCategory(categoryName);\n      res.status(201).json({ message: \"Category created successfully\", category: categoryName });\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.delete(\"/api/admin/categories/:category\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteCategory(req.params.category);\n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting category:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15535},"server/storage.ts":{"content":"import {\n  products,\n  orders,\n  orderItems,\n  wilayas,\n  admins,\n  type Product,\n  type InsertProduct,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type Wilaya,\n  type InsertWilaya,\n  type Admin,\n  type InsertAdmin,\n  type OrderWithDetails,\n  type CreateOrderRequest,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Products\n  getProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n\n  // Orders\n  getOrders(): Promise<OrderWithDetails[]>;\n  getOrder(id: string): Promise<OrderWithDetails | undefined>;\n  createOrder(order: CreateOrderRequest): Promise<Order>;\n  updateOrderStatus(id: string, status: string): Promise<Order>;\n\n  // Wilayas\n  getWilayas(): Promise<Wilaya[]>;\n  getWilaya(id: string): Promise<Wilaya | undefined>;\n  updateWilayaDeliveryPrice(id: string, price: string): Promise<Wilaya>;\n\n  // Admin\n  getAdminByEmail(email: string): Promise<Admin | undefined>;\n  createAdmin(admin: InsertAdmin): Promise<Admin>;\n\n  // Categories\n  getCategories(): Promise<string[]>;\n  deleteCategory(category: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Products\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.isActive, true)).orderBy(desc(products.createdAt));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async createProduct(productData: InsertProduct): Promise<Product> {\n    const [product] = await db\n      .insert(products)\n      .values({\n        ...productData,\n        updatedAt: new Date(),\n      })\n      .returning();\n    return product;\n  }\n\n  async updateProduct(id: string, productData: Partial<InsertProduct>): Promise<Product> {\n    const [product] = await db\n      .update(products)\n      .set({\n        ...productData,\n        updatedAt: new Date(),\n      })\n      .where(eq(products.id, id))\n      .returning();\n    return product;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.update(products).set({ isActive: false }).where(eq(products.id, id));\n  }\n\n  // Orders\n  async getOrders(): Promise<OrderWithDetails[]> {\n    const ordersWithDetails = await db.query.orders.findMany({\n      with: {\n        wilaya: true,\n        items: {\n          with: {\n            product: true,\n          },\n        },\n      },\n      orderBy: [desc(orders.createdAt)],\n    });\n    return ordersWithDetails;\n  }\n\n  async getOrder(id: string): Promise<OrderWithDetails | undefined> {\n    const order = await db.query.orders.findFirst({\n      where: eq(orders.id, id),\n      with: {\n        wilaya: true,\n        items: {\n          with: {\n            product: true,\n          },\n        },\n      },\n    });\n    return order;\n  }\n\n  async createOrder(orderData: CreateOrderRequest): Promise<Order> {\n    // Get wilaya for delivery price\n    const wilaya = await this.getWilaya(orderData.wilayaId);\n    if (!wilaya) {\n      throw new Error(\"Wilaya not found\");\n    }\n\n    // Calculate totals\n    let subtotal = 0;\n    const orderItemsData: InsertOrderItem[] = [];\n\n    for (const item of orderData.items) {\n      const product = await this.getProduct(item.productId);\n      if (!product) {\n        throw new Error(`Product ${item.productId} not found`);\n      }\n      const itemTotal = parseFloat(product.price) * item.quantity;\n      subtotal += itemTotal;\n      \n      orderItemsData.push({\n        productId: item.productId,\n        quantity: item.quantity,\n        price: product.price,\n        orderId: \"\", // Will be set after order creation\n      });\n    }\n\n    const deliveryPrice = parseFloat(wilaya.deliveryPrice);\n    const total = subtotal + deliveryPrice;\n\n    // Create order\n    const [order] = await db\n      .insert(orders)\n      .values({\n        customerName: orderData.customerName,\n        customerPhone: orderData.customerPhone,\n        wilayaId: orderData.wilayaId,\n        address: orderData.address,\n        subtotal: subtotal.toString(),\n        deliveryPrice: wilaya.deliveryPrice,\n        total: total.toString(),\n      })\n      .returning();\n\n    // Create order items\n    const itemsWithOrderId = orderItemsData.map(item => ({\n      ...item,\n      orderId: order.id,\n    }));\n\n    await db.insert(orderItems).values(itemsWithOrderId);\n\n    return order;\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order> {\n    const [order] = await db\n      .update(orders)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return order;\n  }\n\n  // Wilayas\n  async getWilayas(): Promise<Wilaya[]> {\n    return await db.select().from(wilayas).orderBy(wilayas.code);\n  }\n\n  async getWilaya(id: string): Promise<Wilaya | undefined> {\n    const [wilaya] = await db.select().from(wilayas).where(eq(wilayas.id, id));\n    return wilaya;\n  }\n\n  async updateWilayaDeliveryPrice(id: string, price: string): Promise<Wilaya> {\n    const [wilaya] = await db\n      .update(wilayas)\n      .set({ \n        deliveryPrice: price,\n        updatedAt: new Date(),\n      })\n      .where(eq(wilayas.id, id))\n      .returning();\n    return wilaya;\n  }\n\n  // Admin\n  async getAdminByEmail(email: string): Promise<Admin | undefined> {\n    const [admin] = await db.select().from(admins).where(eq(admins.email, email));\n    return admin;\n  }\n\n  async createAdmin(adminData: InsertAdmin): Promise<Admin> {\n    const [admin] = await db\n      .insert(admins)\n      .values(adminData)\n      .returning();\n    return admin;\n  }\n\n  // Categories\n  async getCategories(): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ category: products.category })\n      .from(products)\n      .where(and(eq(products.isActive, true), sql`${products.category} IS NOT NULL`));\n    \n    return result\n      .map(row => row.category)\n      .filter(category => category && category.trim() !== \"\") as string[];\n  }\n\n  async deleteCategory(category: string): Promise<void> {\n    // Set category to null for all products with this category\n    await db\n      .update(products)\n      .set({ category: null })\n      .where(eq(products.category, category));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6554},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { \n  pgTable, \n  text, \n  varchar, \n  integer, \n  timestamp, \n  decimal, \n  jsonb,\n  index,\n  boolean\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table for authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  images: text(\"images\").array().default(sql`'{}'::text[]`),\n  sizes: text(\"sizes\").array().default(sql`'{}'::text[]`),\n  colors: text(\"colors\").array().default(sql`'{}'::text[]`),\n  stock: integer(\"stock\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  category: varchar(\"category\", { length: 50 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Wilayas (Algerian provinces) delivery pricing\nexport const wilayas = pgTable(\"wilayas\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 2 }).notNull().unique(),\n  name: text(\"name\").notNull(),\n  deliveryPrice: decimal(\"delivery_price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerName: text(\"customer_name\").notNull(),\n  customerPhone: varchar(\"customer_phone\", { length: 20 }).notNull(),\n  wilayaId: varchar(\"wilaya_id\").notNull().references(() => wilayas.id),\n  address: text(\"address\"),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  deliveryPrice: decimal(\"delivery_price\", { precision: 10, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order items table\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull().references(() => orders.id, { onDelete: \"cascade\" }),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Admin users table\nexport const admins = pgTable(\"admins\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  wilaya: one(wilayas, {\n    fields: [orders.wilayaId],\n    references: [wilayas.id],\n  }),\n  items: many(orderItems),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const wilayasRelations = relations(wilayas, ({ many }) => ({\n  orders: many(orders),\n}));\n\n// Zod schemas\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWilayaSchema = createInsertSchema(wilayas).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAdminSchema = createInsertSchema(admins).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\n\nexport type Wilaya = typeof wilayas.$inferSelect;\nexport type InsertWilaya = z.infer<typeof insertWilayaSchema>;\n\nexport type Admin = typeof admins.$inferSelect;\nexport type InsertAdmin = z.infer<typeof insertAdminSchema>;\n\n// Extended types for API responses\nexport type OrderWithDetails = Order & {\n  wilaya: Wilaya;\n  items: (OrderItem & { product: Product })[];\n};\n\nexport type CreateOrderRequest = {\n  customerName: string;\n  customerPhone: string;\n  wilayaId: string;\n  address?: string;\n  items: { productId: string; quantity: number }[];\n};\n","size_bytes":5382},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Product from \"@/pages/product\";\nimport Admin from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/product/:id\" component={Product} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":877},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(12, 100%, 59%);\n  --primary-dark: hsl(12, 76%, 55%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(12, 100%, 59%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(12, 100%, 59%);\n  --coral: hsl(12, 100%, 70%);\n  --orange-light: hsl(20, 100%, 62%);\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(12, 100%, 59%);\n  --primary-dark: hsl(12, 76%, 55%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(12, 100%, 59%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(12, 100%, 59%);\n  --coral: hsl(12, 100%, 70%);\n  --orange-light: hsl(20, 100%, 62%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-inter antialiased;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer utilities {\n  .text-primary {\n    color: var(--primary);\n  }\n  \n  .text-primary-dark {\n    color: var(--primary-dark);\n  }\n  \n  .bg-primary {\n    background-color: var(--primary);\n  }\n  \n  .bg-primary-dark {\n    background-color: var(--primary-dark);\n  }\n  \n  .bg-coral {\n    background-color: var(--coral);\n  }\n  \n  .bg-orange-light {\n    background-color: var(--orange-light);\n  }\n  \n  .border-primary {\n    border-color: var(--primary);\n  }\n  \n  .hover\\:bg-primary-dark:hover {\n    background-color: var(--primary-dark);\n  }\n  \n  .hover\\:text-primary:hover {\n    color: var(--primary);\n  }\n  \n  .hover\\:border-primary:hover {\n    border-color: var(--primary);\n  }\n}\n","size_bytes":2833},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/checkout-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { X, CreditCard, Minus, Plus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CartState } from \"@/types\";\nimport { cartManager } from \"@/lib/cart\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Wilaya, CreateOrderRequest } from \"@shared/schema\";\n\ninterface CheckoutModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  cartState: CartState;\n}\n\nexport default function CheckoutModal({ isOpen, onClose, cartState }: CheckoutModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [customerName, setCustomerName] = useState(\"\");\n  const [customerPhone, setCustomerPhone] = useState(\"\");\n  const [selectedWilayaId, setSelectedWilayaId] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [deliveryPrice, setDeliveryPrice] = useState(0);\n\n  const { data: wilayas = [] } = useQuery<Wilaya[]>({\n    queryKey: [\"/api/wilayas\"],\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: CreateOrderRequest) => {\n      const response = await apiRequest(\"POST\", \"/api/orders\", orderData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Commande confirmÃ©e !\",\n        description: \"Nous vous contacterons bientÃ´t pour confirmer votre commande.\",\n      });\n      cartManager.clearCart();\n      onClose();\n      resetForm();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de passer la commande. Veuillez rÃ©essayer.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Error creating order:\", error);\n    },\n  });\n\n  const resetForm = () => {\n    setCustomerName(\"\");\n    setCustomerPhone(\"\");\n    setSelectedWilayaId(\"\");\n    setAddress(\"\");\n    setDeliveryPrice(0);\n  };\n\n  useEffect(() => {\n    if (selectedWilayaId) {\n      const selectedWilaya = wilayas.find(w => w.id === selectedWilayaId);\n      if (selectedWilaya) {\n        setDeliveryPrice(parseFloat(selectedWilaya.deliveryPrice));\n      }\n    } else {\n      setDeliveryPrice(0);\n    }\n  }, [selectedWilayaId, wilayas]);\n\n  const handleQuantityChange = (productId: string, newQuantity: number) => {\n    cartManager.updateQuantity(productId, newQuantity);\n  };\n\n  const handleRemoveItem = (productId: string) => {\n    cartManager.removeItem(productId);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (cartState.items.length === 0) {\n      toast({\n        title: \"Panier vide\",\n        description: \"Ajoutez des produits Ã  votre panier avant de commander.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const orderData: CreateOrderRequest = {\n      customerName,\n      customerPhone,\n      wilayaId: selectedWilayaId,\n      address,\n      items: cartState.items.map(item => ({\n        productId: item.id,\n        quantity: item.quantity,\n      })),\n    };\n\n    createOrderMutation.mutate(orderData);\n  };\n\n  const total = cartState.total + deliveryPrice;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-lg max-h-screen overflow-y-auto\" data-testid=\"modal-checkout\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <span data-testid=\"text-checkout-title\">Commander</span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              data-testid=\"button-close-checkout\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Cart Items */}\n          <div className=\"space-y-4\" data-testid=\"section-cart-items\">\n            <h3 className=\"font-medium text-gray-900\">Articles dans votre panier</h3>\n            {cartState.items.map((item) => (\n              <Card key={item.id} className=\"p-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <img\n                    src={item.imageUrl}\n                    alt={item.name}\n                    className=\"w-12 h-12 object-cover rounded\"\n                    data-testid={`img-cart-item-${item.id}`}\n                  />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-sm\" data-testid={`text-cart-item-name-${item.id}`}>\n                      {item.name}\n                    </h4>\n                    <p className=\"text-primary font-bold text-sm\" data-testid={`text-cart-item-price-${item.id}`}>\n                      {item.price}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleQuantityChange(item.id, item.quantity - 1)}\n                      data-testid={`button-decrease-${item.id}`}\n                    >\n                      <Minus className=\"h-3 w-3\" />\n                    </Button>\n                    <span className=\"w-8 text-center\" data-testid={`text-quantity-${item.id}`}>\n                      {item.quantity}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleQuantityChange(item.id, item.quantity + 1)}\n                      data-testid={`button-increase-${item.id}`}\n                    >\n                      <Plus className=\"h-3 w-3\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleRemoveItem(item.id)}\n                      className=\"text-red-500 hover:text-red-700\"\n                      data-testid={`button-remove-${item.id}`}\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n\n          {/* Customer Information Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"form-checkout\">\n            <div>\n              <Label htmlFor=\"customerName\">Nom complet *</Label>\n              <Input\n                id=\"customerName\"\n                type=\"text\"\n                required\n                value={customerName}\n                onChange={(e) => setCustomerName(e.target.value)}\n                className=\"mt-1\"\n                data-testid=\"input-customer-name\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"customerPhone\">NumÃ©ro de tÃ©lÃ©phone *</Label>\n              <Input\n                id=\"customerPhone\"\n                type=\"tel\"\n                required\n                value={customerPhone}\n                onChange={(e) => setCustomerPhone(e.target.value)}\n                placeholder=\"0X XX XX XX XX\"\n                className=\"mt-1\"\n                data-testid=\"input-customer-phone\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"wilaya\">Wilaya *</Label>\n              <Select\n                value={selectedWilayaId}\n                onValueChange={setSelectedWilayaId}\n                required\n              >\n                <SelectTrigger className=\"mt-1\" data-testid=\"select-wilaya\">\n                  <SelectValue placeholder=\"Choisir votre wilaya...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {wilayas.map((wilaya) => (\n                    <SelectItem \n                      key={wilaya.id} \n                      value={wilaya.id}\n                      data-testid={`option-wilaya-${wilaya.id}`}\n                    >\n                      {wilaya.code} - {wilaya.name} ({parseFloat(wilaya.deliveryPrice).toLocaleString()} DA)\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"address\">Adresse complÃ¨te</Label>\n              <Textarea\n                id=\"address\"\n                value={address}\n                onChange={(e) => setAddress(e.target.value)}\n                placeholder=\"Votre adresse complÃ¨te...\"\n                className=\"mt-1\"\n                rows={3}\n                data-testid=\"textarea-address\"\n              />\n            </div>\n\n            {/* Order Summary */}\n            <Card className=\"bg-gray-50\">\n              <CardContent className=\"p-4 space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Sous-total:</span>\n                  <span data-testid=\"text-subtotal\">{cartState.total.toLocaleString()} DA</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Livraison:</span>\n                  <span data-testid=\"text-delivery-cost\">{deliveryPrice.toLocaleString()} DA</span>\n                </div>\n                <hr className=\"my-2\" />\n                <div className=\"flex justify-between text-lg font-bold text-primary\">\n                  <span>Total:</span>\n                  <span data-testid=\"text-total-cost\">{total.toLocaleString()} DA</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-primary hover:bg-primary-dark\"\n              disabled={createOrderMutation.isPending || cartState.items.length === 0}\n              data-testid=\"button-confirm-order\"\n            >\n              <CreditCard className=\"h-4 w-4 mr-2\" />\n              {createOrderMutation.isPending ? \"Traitement...\" : \"Confirmer la commande\"}\n            </Button>\n          </form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10460},"client/src/components/product-card.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ShoppingCart, Heart, Check } from \"lucide-react\";\nimport { Product } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\ninterface ProductCardProps {\n  product: Product;\n  onAddToCart: (product: Product) => void;\n}\n\nexport default function ProductCard({ product, onAddToCart }: ProductCardProps) {\n  const [isAdded, setIsAdded] = useState(false);\n  const [isImageLoaded, setIsImageLoaded] = useState(false);\n\n  const handleAddToCart = () => {\n    onAddToCart(product);\n    setIsAdded(true);\n    setTimeout(() => setIsAdded(false), 2000);\n  };\n\n  const formatPrice = (price: string) => {\n    const numPrice = parseFloat(price);\n    return `${numPrice.toLocaleString()} DA`;\n  };\n\n  const isOutOfStock = product.stock !== null && product.stock <= 0;\n\n  return (\n    <Link href={`/product/${product.id}`}>\n      <Card \n        className=\"bg-white rounded-xl shadow-md hover:shadow-xl transition-shadow overflow-hidden group cursor-pointer\"\n        data-testid={`card-product-${product.id}`}\n      >\n      <div className=\"relative overflow-hidden\">\n        <div className={`w-full h-64 bg-gray-200 ${!isImageLoaded ? 'animate-pulse' : ''}`}>\n          <img\n            src={product.imageUrl}\n            alt={product.name}\n            className={`w-full h-64 object-cover group-hover:scale-105 transition-transform duration-300 ${\n              isImageLoaded ? 'opacity-100' : 'opacity-0'\n            }`}\n            onLoad={() => setIsImageLoaded(true)}\n            onError={() => setIsImageLoaded(true)}\n            data-testid={`img-product-${product.id}`}\n          />\n        </div>\n        \n        {product.category === \"nouveau\" && (\n          <Badge className=\"absolute top-4 left-4 bg-green-500 text-white\">\n            Nouveau\n          </Badge>\n        )}\n        \n        {isOutOfStock && (\n          <Badge className=\"absolute top-4 left-4 bg-red-500 text-white\">\n            Rupture de stock\n          </Badge>\n        )}\n        \n      </div>\n      \n      <CardContent className=\"p-6\">\n        <h3 \n          className=\"font-semibold text-lg text-gray-900 mb-2\"\n          data-testid={`text-product-name-${product.id}`}\n        >\n          {product.name}\n        </h3>\n        <p \n          className=\"text-gray-600 text-sm mb-4\"\n          data-testid={`text-product-description-${product.id}`}\n        >\n          {product.description || \"Description non disponible\"}\n        </p>\n        \n        <div className=\"flex items-center justify-between\">\n          <div \n            className=\"text-2xl font-bold text-primary\"\n            data-testid={`text-product-price-${product.id}`}\n          >\n            {formatPrice(product.price)}\n          </div>\n          \n          <Button\n            onClick={handleAddToCart}\n            disabled={isOutOfStock}\n            className={`transition-colors ${\n              isAdded \n                ? \"bg-green-500 hover:bg-green-600\" \n                : \"bg-primary hover:bg-primary-dark\"\n            } ${isOutOfStock ? \"bg-gray-400 cursor-not-allowed\" : \"\"}`}\n            data-testid={`button-add-cart-${product.id}`}\n          >\n            {isAdded ? (\n              <>\n                <Check className=\"h-4 w-4 mr-2\" />\n                AjoutÃ©\n              </>\n            ) : (\n              <>\n                <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                {isOutOfStock ? \"Indisponible\" : \"Ajouter\"}\n              </>\n            )}\n          </Button>\n        </div>\n        \n        {product.stock !== null && product.stock > 0 && product.stock <= 5 && (\n          <p className=\"text-orange-500 text-xs mt-2\" data-testid={`text-stock-warning-${product.id}`}>\n            Plus que {product.stock} en stock !\n          </p>\n        )}\n      </CardContent>\n    </Card>\n    </Link>\n  );\n}\n","size_bytes":3960},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/cart.ts":{"content":"import { CartItem, CartState } from \"@/types\";\n\nclass CartManager {\n  private listeners: ((state: CartState) => void)[] = [];\n  private state: CartState = {\n    items: [],\n    total: 0,\n    itemCount: 0,\n  };\n\n  constructor() {\n    // Load cart from localStorage\n    this.loadFromStorage();\n  }\n\n  private loadFromStorage() {\n    try {\n      const stored = localStorage.getItem(\"cart\");\n      if (stored) {\n        this.state = JSON.parse(stored);\n      }\n    } catch (error) {\n      console.error(\"Error loading cart from storage:\", error);\n    }\n  }\n\n  private saveToStorage() {\n    try {\n      localStorage.setItem(\"cart\", JSON.stringify(this.state));\n    } catch (error) {\n      console.error(\"Error saving cart to storage:\", error);\n    }\n  }\n\n  private calculateTotals() {\n    this.state.itemCount = this.state.items.reduce((sum, item) => sum + item.quantity, 0);\n    this.state.total = this.state.items.reduce((sum, item) => {\n      const price = parseFloat(item.price.replace(/[^\\d.]/g, \"\"));\n      return sum + (price * item.quantity);\n    }, 0);\n  }\n\n  private notifyListeners() {\n    this.listeners.forEach(listener => listener(this.state));\n  }\n\n  addItem(product: { id: string; name: string; price: string; imageUrl: string }) {\n    const existingItem = this.state.items.find(item => item.id === product.id);\n    \n    if (existingItem) {\n      existingItem.quantity += 1;\n    } else {\n      this.state.items.push({\n        id: product.id,\n        name: product.name,\n        price: product.price,\n        quantity: 1,\n        imageUrl: product.imageUrl,\n      });\n    }\n    \n    this.calculateTotals();\n    this.saveToStorage();\n    this.notifyListeners();\n  }\n\n  removeItem(productId: string) {\n    this.state.items = this.state.items.filter(item => item.id !== productId);\n    this.calculateTotals();\n    this.saveToStorage();\n    this.notifyListeners();\n  }\n\n  updateQuantity(productId: string, quantity: number) {\n    const item = this.state.items.find(item => item.id === productId);\n    if (item) {\n      if (quantity <= 0) {\n        this.removeItem(productId);\n      } else {\n        item.quantity = quantity;\n        this.calculateTotals();\n        this.saveToStorage();\n        this.notifyListeners();\n      }\n    }\n  }\n\n  clearCart() {\n    this.state = {\n      items: [],\n      total: 0,\n      itemCount: 0,\n    };\n    this.saveToStorage();\n    this.notifyListeners();\n  }\n\n  getState(): CartState {\n    return { ...this.state };\n  }\n\n  subscribe(listener: (state: CartState) => void) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== listener);\n    };\n  }\n}\n\nexport const cartManager = new CartManager();\n","size_bytes":2691},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Shield, LogOut, Package, ShoppingCart, TrendingUp, Clock } from \"lucide-react\";\nimport ProductForm from \"@/components/admin/product-form\";\nimport OrdersTable from \"@/components/admin/orders-table\";\nimport DeliveryPricing from \"@/components/admin/delivery-pricing\";\nimport CategoryManagement from \"@/components/admin/category-management\";\nimport { AdminAuth } from \"@/types\";\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [auth, setAuth] = useState<AdminAuth>({ isAuthenticated: false, admin: null });\n  const [loginForm, setLoginForm] = useState({ email: \"\", password: \"\" });\n\n  // Check authentication status\n  const { data: adminProfile, isLoading: isCheckingAuth } = useQuery({\n    queryKey: [\"/api/admin/profile\"],\n    retry: false,\n    enabled: !auth.isAuthenticated,\n  });\n\n  // Fetch analytics data\n  const { data: analytics = { totalProducts: 0, totalOrders: 0, pendingOrders: 0, totalRevenue: 0 } } = useQuery<{\n    totalProducts: number;\n    totalOrders: number;\n    pendingOrders: number;\n    totalRevenue: number;\n  }>({\n    queryKey: [\"/api/admin/analytics\"],\n    enabled: auth.isAuthenticated,\n  });\n\n  useEffect(() => {\n    if (adminProfile) {\n      setAuth({ isAuthenticated: true, admin: adminProfile as { id: string; email: string } });\n    }\n  }, [adminProfile]);\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/login\", credentials);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setAuth({ isAuthenticated: true, admin: data.admin });\n      toast({\n        title: \"Connexion rÃ©ussie\",\n        description: \"Bienvenue dans l'administration !\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/profile\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur de connexion\",\n        description: \"Email ou mot de passe incorrect\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/logout\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      setAuth({ isAuthenticated: false, admin: null });\n      toast({\n        title: \"DÃ©connexion\",\n        description: \"Vous avez Ã©tÃ© dÃ©connectÃ© avec succÃ¨s\",\n      });\n      queryClient.clear();\n    },\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginForm);\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  if (isCheckingAuth) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!auth.isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <Shield className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n            <CardTitle className=\"text-2xl\" data-testid=\"text-admin-title\">Administration</CardTitle>\n            <p className=\"text-gray-600\">Connectez-vous pour gÃ©rer votre boutique</p>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\" data-testid=\"form-admin-login\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  required\n                  value={loginForm.email}\n                  onChange={(e) => setLoginForm(prev => ({ ...prev, email: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"input-admin-email\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"password\">Mot de passe</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  required\n                  value={loginForm.password}\n                  onChange={(e) => setLoginForm(prev => ({ ...prev, password: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"input-admin-password\"\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-primary hover:bg-primary-dark\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-admin-login\"\n              >\n                {loginMutation.isPending ? \"Connexion...\" : \"Se connecter\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-dashboard-title\">\n                Tableau de bord\n              </h1>\n              <p className=\"text-gray-600\">GÃ©rez vos produits et commandes</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-600\" data-testid=\"text-admin-email\">\n                {auth.admin?.email}\n              </span>\n              <Button\n                variant=\"ghost\"\n                onClick={handleLogout}\n                disabled={logoutMutation.isPending}\n                data-testid=\"button-admin-logout\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                DÃ©connexion\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Stats */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-blue-200 text-sm\">Total Produits</p>\n                  <p className=\"text-3xl font-bold\" data-testid=\"text-stat-products\">{analytics.totalProducts}</p>\n                </div>\n                <Package className=\"h-8 w-8 text-blue-200\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-green-200 text-sm\">Commandes</p>\n                  <p className=\"text-3xl font-bold\" data-testid=\"text-stat-orders\">{analytics.totalOrders}</p>\n                </div>\n                <ShoppingCart className=\"h-8 w-8 text-green-200\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-primary to-orange-light text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-orange-200 text-sm\">Revenus</p>\n                  <p className=\"text-3xl font-bold\" data-testid=\"text-stat-revenue\">{analytics.totalRevenue.toLocaleString()} DA</p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-orange-200\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-purple-200 text-sm\">En attente</p>\n                  <p className=\"text-3xl font-bold\" data-testid=\"text-stat-pending\">{analytics.pendingOrders}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-purple-200\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"products\" className=\"space-y-6\">\n          <TabsList className=\"bg-white p-1 rounded-lg shadow-sm\">\n            <TabsTrigger \n              value=\"products\" \n              className=\"data-[state=active]:bg-primary data-[state=active]:text-white\"\n              data-testid=\"tab-products\"\n            >\n              Produits\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"orders\" \n              className=\"data-[state=active]:bg-primary data-[state=active]:text-white\"\n              data-testid=\"tab-orders\"\n            >\n              Commandes\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"delivery\" \n              className=\"data-[state=active]:bg-primary data-[state=active]:text-white\"\n              data-testid=\"tab-delivery\"\n            >\n              Tarifs Livraison\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"categories\" \n              className=\"data-[state=active]:bg-primary data-[state=active]:text-white\"\n              data-testid=\"tab-categories\"\n            >\n              CatÃ©gories\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"products\" className=\"space-y-6\">\n            <ProductForm />\n          </TabsContent>\n\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <OrdersTable />\n          </TabsContent>\n\n          <TabsContent value=\"delivery\" className=\"space-y-6\">\n            <DeliveryPricing />\n          </TabsContent>\n\n          <TabsContent value=\"categories\" className=\"space-y-6\">\n            <CategoryManagement />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10692},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ShoppingCart, Users, Truck, Menu, X, CheckCircle } from \"lucide-react\";\nimport ProductCard from \"@/components/product-card\";\nimport CheckoutModal from \"@/components/checkout-modal\";\nimport { cartManager } from \"@/lib/cart\";\nimport { CartState } from \"@/types\";\nimport { Product } from \"@shared/schema\";\n\nexport default function Home() {\n  const [cartState, setCartState] = useState<CartState>(cartManager.getState());\n  const [isCheckoutOpen, setIsCheckoutOpen] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [activeFilter, setActiveFilter] = useState(\"all\");\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  useEffect(() => {\n    const unsubscribe = cartManager.subscribe(setCartState);\n    return unsubscribe;\n  }, []);\n\n  const filteredProducts = products.filter(product => {\n    if (activeFilter === \"all\") return true;\n    if (activeFilter === \"home\") {\n      return product.category === \"home\";\n    }\n    \n    return true;\n  });\n\n  const handleAddToCart = (product: Product) => {\n    cartManager.addItem({\n      id: product.id,\n      name: product.name,\n      price: `${product.price} DA`,\n      imageUrl: product.imageUrl,\n    });\n  };\n\n  const filters = [\n    { key: \"all\", label: \"Tous les produits\" },\n    { key: \"home\", label: \"Home\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation */}\n      <nav className=\"bg-white shadow-sm sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <span className=\"text-2xl font-bold text-primary\">Pix Store DZ</span>\n              </div>\n              <div className=\"hidden md:block ml-10\">\n                <div className=\"flex items-baseline space-x-8\">\n                  <a href=\"#\" className=\"text-gray-900 hover:text-primary px-3 py-2 text-sm font-medium transition-colors\">\n                    Accueil\n                  </a>\n                  <a href=\"#products\" className=\"text-primary px-3 py-2 text-sm font-medium\">\n                    Produits\n                  </a>\n                  <a href=\"#\" className=\"text-gray-900 hover:text-primary px-3 py-2 text-sm font-medium transition-colors\">\n                    Ã€ propos\n                  </a>\n                  <a href=\"#\" className=\"text-gray-900 hover:text-primary px-3 py-2 text-sm font-medium transition-colors\">\n                    Contact\n                  </a>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"relative\"\n                onClick={() => setIsCheckoutOpen(true)}\n                data-testid=\"button-cart\"\n              >\n                <ShoppingCart className=\"h-5 w-5\" />\n                {cartState.itemCount > 0 && (\n                  <Badge \n                    className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 flex items-center justify-center bg-primary text-white text-xs\"\n                    data-testid=\"text-cart-count\"\n                  >\n                    {cartState.itemCount}\n                  </Badge>\n                )}\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"md:hidden\"\n                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n                data-testid=\"button-mobile-menu\"\n              >\n                {isMobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        {/* Mobile menu */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden bg-white border-t\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1\">\n              <a href=\"#\" className=\"block px-3 py-2 text-gray-900 hover:text-primary transition-colors\">\n                Accueil\n              </a>\n              <a href=\"#products\" className=\"block px-3 py-2 text-primary\">\n                Produits\n              </a>\n              <a href=\"#\" className=\"block px-3 py-2 text-gray-900 hover:text-primary transition-colors\">\n                Ã€ propos\n              </a>\n              <a href=\"#\" className=\"block px-3 py-2 text-gray-900 hover:text-primary transition-colors\">\n                Contact\n              </a>\n            </div>\n          </div>\n        )}\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-primary via-coral to-orange-600 text-white py-24 md:py-32 overflow-hidden\">\n        {/* Background decorative elements */}\n        <div className=\"absolute inset-0 bg-black bg-opacity-10\">\n          <div className=\"absolute top-0 left-0 w-64 h-64 bg-white opacity-5 rounded-full -translate-x-32 -translate-y-32\"></div>\n          <div className=\"absolute top-1/2 right-0 w-96 h-96 bg-white opacity-5 rounded-full translate-x-48 -translate-y-48\"></div>\n          <div className=\"absolute bottom-0 left-1/3 w-32 h-32 bg-white opacity-10 rounded-full translate-y-16\"></div>\n        </div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"mb-8\">\n              <h1 className=\"text-5xl md:text-7xl lg:text-8xl font-extrabold mb-6 tracking-tight\" data-testid=\"text-hero-title\">\n                <span className=\"bg-gradient-to-r from-white to-orange-100 bg-clip-text text-transparent\">\n                  Pix Store DZ\n                </span>\n              </h1>\n              <div className=\"w-24 h-1 bg-white mx-auto rounded-full opacity-60\"></div>\n            </div>\n            \n            <p className=\"text-2xl md:text-3xl lg:text-4xl mb-8 font-light leading-relaxed\" data-testid=\"text-hero-subtitle\">\n              Votre destination pour les \n              <span className=\"font-semibold text-orange-200\"> meilleurs t-shirts</span> en AlgÃ©rie\n            </p>\n            \n            <p className=\"text-lg md:text-xl mb-12 max-w-3xl mx-auto leading-relaxed opacity-90\" data-testid=\"text-hero-description\">\n              DÃ©couvrez notre collection exclusive de t-shirts de qualitÃ© premium. \n              Designs uniques, matiÃ¨res exceptionnelles et livraison rapide dans toutes les wilayas d'AlgÃ©rie.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Button \n                size=\"lg\"\n                className=\"bg-white text-primary hover:bg-gray-100 font-semibold px-8 py-4 text-lg rounded-full shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300\"\n                onClick={() => document.getElementById('products')?.scrollIntoView({ behavior: 'smooth' })}\n                data-testid=\"button-shop-now\"\n              >\n                <ShoppingCart className=\"mr-2 h-5 w-5\" />\n                DÃ©couvrir la Collection\n              </Button>\n              \n              <Button \n                variant=\"outline\"\n                size=\"lg\"\n                className=\"border-2 border-white text-white hover:bg-white hover:text-primary font-semibold px-8 py-4 text-lg rounded-full backdrop-blur-sm bg-white bg-opacity-10 hover:bg-opacity-100 transition-all duration-300\"\n                data-testid=\"button-learn-more\"\n              >\n                En savoir plus\n              </Button>\n            </div>\n            \n            <div className=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n              <div className=\"bg-white bg-opacity-10 backdrop-blur-sm rounded-2xl p-6 border border-white border-opacity-20\">\n                <div className=\"text-3xl font-bold mb-2\">58</div>\n                <div className=\"text-orange-200 font-medium\">Wilayas couvertes</div>\n              </div>\n              <div className=\"bg-white bg-opacity-10 backdrop-blur-sm rounded-2xl p-6 border border-white border-opacity-20\">\n                <div className=\"text-3xl font-bold mb-2\">100%</div>\n                <div className=\"text-orange-200 font-medium\">QualitÃ© garantie</div>\n              </div>\n              <div className=\"bg-white bg-opacity-10 backdrop-blur-sm rounded-2xl p-6 border border-white border-opacity-20\">\n                <div className=\"text-3xl font-bold mb-2\">24h</div>\n                <div className=\"text-orange-200 font-medium\">Livraison express</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Bottom wave */}\n        <div className=\"absolute bottom-0 left-0 right-0\">\n          <svg className=\"w-full h-12 md:h-20 text-white\" viewBox=\"0 0 1200 120\" preserveAspectRatio=\"none\">\n            <path d=\"M0,0V60c0,0,200,40,600,40s600-40,600-40V0Z\" className=\"fill-current\"></path>\n          </svg>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-3 gap-8 text-center\">\n            <div className=\"space-y-4\">\n              <div className=\"text-primary text-5xl\">\n                <Users className=\"mx-auto\" />\n              </div>\n              <h3 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-stat-clients\">5000+</h3>\n              <p className=\"text-gray-600\">Clients satisfaits</p>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"text-primary text-5xl\">\n                <Truck className=\"mx-auto\" />\n              </div>\n              <h3 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-stat-wilayas\">58 Wilayas</h3>\n              <p className=\"text-gray-600\">Livraison nationale</p>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"text-primary text-5xl\">\n                <CheckCircle className=\"mx-auto\" />\n              </div>\n              <h3 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-stat-quality\">100%</h3>\n              <p className=\"text-gray-600\">QualitÃ© garantie</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Products Section */}\n      <section id=\"products\" className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\" data-testid=\"text-products-title\">\n              Nos T-shirts\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\" data-testid=\"text-products-subtitle\">\n              Collection exclusive de t-shirts de qualitÃ© premium pour hommes et femmes\n            </p>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex flex-wrap justify-center mb-12 space-x-4\">\n            {filters.map((filter) => (\n              <Button\n                key={filter.key}\n                variant={activeFilter === filter.key ? \"default\" : \"outline\"}\n                className={`px-6 py-2 rounded-full transition-colors ${\n                  activeFilter === filter.key\n                    ? \"bg-primary text-white border-primary\"\n                    : \"border-gray-300 text-gray-700 hover:border-primary hover:text-primary\"\n                }`}\n                onClick={() => setActiveFilter(filter.key)}\n                data-testid={`button-filter-${filter.key}`}\n              >\n                {filter.label}\n              </Button>\n            ))}\n          </div>\n\n          {/* Product Grid */}\n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"mt-4 text-gray-600\">Chargement des produits...</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\" data-testid=\"grid-products\">\n              {filteredProducts.map((product) => (\n                <ProductCard\n                  key={product.id}\n                  product={product}\n                  onAddToCart={handleAddToCart}\n                />\n              ))}\n            </div>\n          )}\n\n          {filteredProducts.length === 0 && !isLoading && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-600 text-lg\" data-testid=\"text-no-products\">\n                Aucun produit trouvÃ© pour cette recherche.\n              </p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"text-2xl font-bold text-primary mb-4\">Pix Store DZ</div>\n              <p className=\"text-gray-300 mb-4\">\n                Votre destination pour les meilleurs t-shirts en AlgÃ©rie. QualitÃ© premium, livraison rapide dans toutes les wilayas.\n              </p>\n            </div>\n            \n            <div>\n              <h4 className=\"font-bold text-lg mb-4\">Navigation</h4>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">Accueil</a></li>\n                <li><a href=\"#products\" className=\"text-gray-300 hover:text-primary transition-colors\">Produits</a></li>\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">Ã€ propos</a></li>\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">Contact</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-bold text-lg mb-4\">Service Client</h4>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">Livraison</a></li>\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">Retours</a></li>\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">FAQ</a></li>\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">Support</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-bold text-lg mb-4\">Contact</h4>\n              <div className=\"space-y-2 text-gray-300\">\n                <p>+213 XXX XXX XXX</p>\n                <p>contact@pixstoredz.com</p>\n                <p>Alger, AlgÃ©rie</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2024 Pix Store DZ. Tous droits rÃ©servÃ©s.</p>\n          </div>\n        </div>\n      </footer>\n\n      {/* Checkout Modal */}\n      <CheckoutModal\n        isOpen={isCheckoutOpen}\n        onClose={() => setIsCheckoutOpen(false)}\n        cartState={cartState}\n      />\n    </div>\n  );\n}\n","size_bytes":15604},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface CartItem {\n  id: string;\n  name: string;\n  price: string;\n  quantity: number;\n  imageUrl: string;\n}\n\nexport interface CartState {\n  items: CartItem[];\n  total: number;\n  itemCount: number;\n}\n\nexport interface AdminAuth {\n  isAuthenticated: boolean;\n  admin: { id: string; email: string } | null;\n}\n","size_bytes":315},"client/src/components/admin/category-management.tsx":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Tags, Trash2, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function CategoryManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n\n  const { data: categories = [], isLoading } = useQuery<string[]>({\n    queryKey: [\"/api/admin/categories\"],\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (name: string) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/categories\", { name });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"CatÃ©gorie crÃ©Ã©e\",\n        description: \"La nouvelle catÃ©gorie a Ã©tÃ© crÃ©Ã©e avec succÃ¨s\",\n      });\n      setNewCategoryName(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/categories\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message === \"Category already exists\" ? \"Cette catÃ©gorie existe dÃ©jÃ \" : \"Impossible de crÃ©er la catÃ©gorie\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (category: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/admin/categories/${encodeURIComponent(category)}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"CatÃ©gorie supprimÃ©e\",\n        description: \"La catÃ©gorie a Ã©tÃ© supprimÃ©e avec succÃ¨s\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/categories\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la catÃ©gorie\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateCategory = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (newCategoryName.trim()) {\n      createCategoryMutation.mutate(newCategoryName.trim());\n    }\n  };\n\n  const handleDeleteCategory = (category: string) => {\n    if (confirm(`ÃŠtes-vous sÃ»r de vouloir supprimer la catÃ©gorie \"${category}\" ? Cette action retirera la catÃ©gorie de tous les produits concernÃ©s.`)) {\n      deleteCategoryMutation.mutate(category);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\" data-testid=\"text-categories-management\">\n          <Tags className=\"h-5 w-5 mr-2\" />\n          Gestion des CatÃ©gories\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-2 text-gray-600\">Chargement des catÃ©gories...</p>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Add new category form */}\n            <div className=\"bg-gray-50 p-4 rounded-lg border\">\n              <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Ajouter une nouvelle catÃ©gorie</h3>\n              <form onSubmit={handleCreateCategory} className=\"flex gap-2\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Nom de la catÃ©gorie...\"\n                  value={newCategoryName}\n                  onChange={(e) => setNewCategoryName(e.target.value)}\n                  disabled={createCategoryMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"input-new-category\"\n                />\n                <Button\n                  type=\"submit\"\n                  disabled={!newCategoryName.trim() || createCategoryMutation.isPending}\n                  className=\"flex items-center\"\n                  data-testid=\"button-add-category\"\n                >\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  Ajouter\n                </Button>\n              </form>\n            </div>\n\n            {/* Existing categories */}\n            <div className=\"space-y-4\">\n            {categories.length > 0 ? (\n              <>\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  Voici les catÃ©gories actuellement utilisÃ©es dans vos produits. Vous pouvez les supprimer si nÃ©cessaire.\n                </p>\n                <div className=\"grid gap-3\" data-testid=\"list-categories\">\n                  {categories.map((category) => (\n                    <div\n                      key={category}\n                      className=\"flex items-center justify-between p-3 border rounded-lg bg-gray-50\"\n                      data-testid={`item-category-${category}`}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge className=\"bg-primary text-white\" data-testid={`badge-category-${category}`}>\n                          {category}\n                        </Badge>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDeleteCategory(category)}\n                        className=\"text-red-600 hover:text-red-800\"\n                        disabled={deleteCategoryMutation.isPending}\n                        data-testid={`button-delete-category-${category}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Tags className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-600\" data-testid=\"text-no-categories\">\n                  Aucune catÃ©gorie trouvÃ©e\n                </p>\n                <p className=\"text-sm text-gray-500 mt-2\">\n                  Les catÃ©gories apparaÃ®tront ici lorsque vous ajouterez des produits avec des catÃ©gories.\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6638},"client/src/components/admin/delivery-pricing.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Truck, MapPin } from \"lucide-react\";\nimport { Wilaya } from \"@shared/schema\";\n\nexport default function DeliveryPricing() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedWilayaId, setSelectedWilayaId] = useState(\"\");\n  const [newPrice, setNewPrice] = useState(\"\");\n\n  const { data: wilayas = [], isLoading } = useQuery<Wilaya[]>({\n    queryKey: [\"/api/wilayas\"],\n  });\n\n  const updateDeliveryPriceMutation = useMutation({\n    mutationFn: async ({ id, price }: { id: string; price: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/admin/wilayas/${id}/delivery-price`, { price });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Prix mis Ã  jour\",\n        description: \"Le prix de livraison a Ã©tÃ© modifiÃ© avec succÃ¨s\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wilayas\"] });\n      setSelectedWilayaId(\"\");\n      setNewPrice(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre Ã  jour le prix de livraison\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedWilayaId || !newPrice) {\n      toast({\n        title: \"Erreur\",\n        description: \"Veuillez sÃ©lectionner une wilaya et saisir un prix\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const price = parseFloat(newPrice);\n    if (isNaN(price) || price < 0) {\n      toast({\n        title: \"Erreur\",\n        description: \"Veuillez saisir un prix valide\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateDeliveryPriceMutation.mutate({ id: selectedWilayaId, price: newPrice });\n  };\n\n  const formatPrice = (price: string) => {\n    const numPrice = parseFloat(price);\n    return `${numPrice.toLocaleString()} DA`;\n  };\n\n  return (\n    <div className=\"grid md:grid-cols-2 gap-6\">\n      {/* Update Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\" data-testid=\"text-delivery-form-title\">\n            <Truck className=\"h-5 w-5 mr-2\" />\n            Modifier les tarifs\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"form-delivery-pricing\">\n            <div>\n              <Label htmlFor=\"wilaya\">Wilaya</Label>\n              <Select\n                value={selectedWilayaId}\n                onValueChange={setSelectedWilayaId}\n              >\n                <SelectTrigger className=\"mt-1\" data-testid=\"select-delivery-wilaya\">\n                  <SelectValue placeholder=\"SÃ©lectionner une wilaya...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {wilayas.map((wilaya) => (\n                    <SelectItem key={wilaya.id} value={wilaya.id}>\n                      {wilaya.code} - {wilaya.name} ({formatPrice(wilaya.deliveryPrice)})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"price\">Prix de livraison (DA)</Label>\n              <Input\n                id=\"price\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={newPrice}\n                onChange={(e) => setNewPrice(e.target.value)}\n                placeholder=\"0.00\"\n                className=\"mt-1\"\n                data-testid=\"input-delivery-price\"\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-primary hover:bg-primary-dark\"\n              disabled={updateDeliveryPriceMutation.isPending}\n              data-testid=\"button-update-delivery-price\"\n            >\n              {updateDeliveryPriceMutation.isPending ? \"Mise Ã  jour...\" : \"Mettre Ã  jour\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Current Pricing List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\" data-testid=\"text-pricing-list-title\">\n            <MapPin className=\"h-5 w-5 mr-2\" />\n            Tarifs actuels\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"mt-2 text-sm text-gray-600\">Chargement...</p>\n            </div>\n          ) : (\n            <div className=\"space-y-2 max-h-80 overflow-y-auto\" data-testid=\"list-delivery-prices\">\n              {wilayas.map((wilaya) => (\n                <div\n                  key={wilaya.id}\n                  className=\"flex justify-between items-center py-2 border-b border-gray-100 last:border-b-0\"\n                  data-testid={`item-wilaya-${wilaya.id}`}\n                >\n                  <div>\n                    <span className=\"font-medium\" data-testid={`text-wilaya-name-${wilaya.id}`}>\n                      {wilaya.code} - {wilaya.name}\n                    </span>\n                  </div>\n                  <div className=\"font-bold text-primary\" data-testid={`text-wilaya-price-${wilaya.id}`}>\n                    {formatPrice(wilaya.deliveryPrice)}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {wilayas.length === 0 && !isLoading && (\n            <div className=\"text-center py-8\">\n              <MapPin className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n              <p className=\"text-gray-600\" data-testid=\"text-no-wilayas\">\n                Aucune wilaya configurÃ©e\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6414},"client/src/components/admin/orders-table.tsx":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ShoppingCart, Phone, MapPin, Eye } from \"lucide-react\";\nimport { OrderWithDetails } from \"@shared/schema\";\n\nexport default function OrdersTable() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: orders = [], isLoading } = useQuery<OrderWithDetails[]>({\n    queryKey: [\"/api/admin/orders\"],\n  });\n\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/admin/orders/${id}/status`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Statut mis Ã  jour\",\n        description: \"Le statut de la commande a Ã©tÃ© modifiÃ© avec succÃ¨s\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/orders\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre Ã  jour le statut\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStatusChange = (orderId: string, newStatus: string) => {\n    updateOrderStatusMutation.mutate({ id: orderId, status: newStatus });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pending: { label: \"En attente\", className: \"bg-yellow-100 text-yellow-800\" },\n      confirmed: { label: \"ConfirmÃ©e\", className: \"bg-blue-100 text-blue-800\" },\n      shipped: { label: \"ExpÃ©diÃ©e\", className: \"bg-purple-100 text-purple-800\" },\n      delivered: { label: \"LivrÃ©e\", className: \"bg-green-100 text-green-800\" },\n      cancelled: { label: \"AnnulÃ©e\", className: \"bg-red-100 text-red-800\" },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    \n    return (\n      <Badge className={config.className}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"fr-FR\", {\n      day: \"2-digit\",\n      month: \"2-digit\",\n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const formatPrice = (price: string) => {\n    const numPrice = parseFloat(price);\n    return `${numPrice.toLocaleString()} DA`;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\" data-testid=\"text-orders-management\">\n          <ShoppingCart className=\"h-5 w-5 mr-2\" />\n          Gestion des Commandes\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-2 text-gray-600\">Chargement des commandes...</p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <Table data-testid=\"table-orders\">\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Commande</TableHead>\n                  <TableHead>Client</TableHead>\n                  <TableHead>Wilaya</TableHead>\n                  <TableHead>Total</TableHead>\n                  <TableHead>Statut</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {orders.map((order) => (\n                  <TableRow key={order.id} data-testid={`row-order-${order.id}`}>\n                    <TableCell>\n                      <div className=\"font-medium\" data-testid={`text-order-id-${order.id}`}>\n                        #{order.id.slice(-8)}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {order.items.length} article{order.items.length > 1 ? \"s\" : \"\"}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\" data-testid={`text-customer-name-${order.id}`}>\n                          {order.customerName}\n                        </div>\n                        <div className=\"text-sm text-gray-500 flex items-center\">\n                          <Phone className=\"h-3 w-3 mr-1\" />\n                          {order.customerPhone}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <MapPin className=\"h-3 w-3 mr-1 text-gray-400\" />\n                        <span data-testid={`text-wilaya-${order.id}`}>\n                          {order.wilaya.code} - {order.wilaya.name}\n                        </span>\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        Livraison: {formatPrice(order.deliveryPrice)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"font-bold text-primary\" data-testid={`text-total-${order.id}`}>\n                        {formatPrice(order.total)}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        Sous-total: {formatPrice(order.subtotal)}\n                      </div>\n                    </TableCell>\n                    <TableCell data-testid={`badge-status-${order.id}`}>\n                      {getStatusBadge(order.status || \"pending\")}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\" data-testid={`text-date-${order.id}`}>\n                        {formatDate(order.createdAt!)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Select\n                          value={order.status || \"pending\"}\n                          onValueChange={(status) => handleStatusChange(order.id, status)}\n                        >\n                          <SelectTrigger className=\"w-32\" data-testid={`select-status-${order.id}`}>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"pending\">En attente</SelectItem>\n                            <SelectItem value=\"confirmed\">ConfirmÃ©e</SelectItem>\n                            <SelectItem value=\"shipped\">ExpÃ©diÃ©e</SelectItem>\n                            <SelectItem value=\"delivered\">LivrÃ©e</SelectItem>\n                            <SelectItem value=\"cancelled\">AnnulÃ©e</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          title=\"Voir les dÃ©tails\"\n                          data-testid={`button-view-${order.id}`}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n\n        {orders.length === 0 && !isLoading && (\n          <div className=\"text-center py-12\">\n            <ShoppingCart className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-600\" data-testid=\"text-no-orders\">\n              Aucune commande trouvÃ©e\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8262},"client/src/components/admin/product-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Edit, Trash2, Package, X, ImageIcon } from \"lucide-react\";\nimport { Product, InsertProduct } from \"@shared/schema\";\n\nexport default function ProductForm() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [formData, setFormData] = useState<InsertProduct>({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    imageUrl: \"\",\n    images: [],\n    sizes: [],\n    colors: [],\n    stock: 0,\n    category: \"\",\n  });\n  const [newImageUrl, setNewImageUrl] = useState(\"\");\n  const [newSize, setNewSize] = useState(\"\");\n  const [newColor, setNewColor] = useState(\"\");\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: InsertProduct) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/products\", productData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Produit crÃ©Ã©\",\n        description: \"Le produit a Ã©tÃ© ajoutÃ© avec succÃ¨s\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      handleCloseModal();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de crÃ©er le produit\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, productData }: { id: string; productData: Partial<InsertProduct> }) => {\n      const response = await apiRequest(\"PUT\", `/api/admin/products/${id}`, productData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Produit modifiÃ©\",\n        description: \"Le produit a Ã©tÃ© mis Ã  jour avec succÃ¨s\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      handleCloseModal();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier le produit\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/admin/products/${id}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Produit supprimÃ©\",\n        description: \"Le produit a Ã©tÃ© supprimÃ© avec succÃ¨s\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer le produit\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingProduct) {\n      updateProductMutation.mutate({ id: editingProduct.id, productData: formData });\n    } else {\n      createProductMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    setFormData({\n      name: product.name,\n      description: product.description || \"\",\n      price: product.price,\n      imageUrl: product.imageUrl,\n      images: product.images || [],\n      sizes: product.sizes || [],\n      colors: product.colors || [],\n      stock: product.stock || 0,\n      category: product.category || \"\",\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"ÃŠtes-vous sÃ»r de vouloir supprimer ce produit ?\")) {\n      deleteProductMutation.mutate(id);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingProduct(null);\n    setFormData({\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      imageUrl: \"\",\n      images: [],\n      sizes: [],\n      colors: [],\n      stock: 0,\n      category: \"\",\n    });\n    setNewImageUrl(\"\");\n    setNewSize(\"\");\n    setNewColor(\"\");\n  };\n\n  const formatPrice = (price: string) => {\n    const numPrice = parseFloat(price);\n    return `${numPrice.toLocaleString()} DA`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center\" data-testid=\"text-products-management\">\n              <Package className=\"h-5 w-5 mr-2\" />\n              Gestion des Produits\n            </CardTitle>\n            <Button\n              onClick={() => setIsModalOpen(true)}\n              className=\"bg-primary hover:bg-primary-dark\"\n              data-testid=\"button-add-product\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Ajouter un produit\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"mt-2 text-gray-600\">Chargement des produits...</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table data-testid=\"table-products\">\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Produit</TableHead>\n                    <TableHead>Prix</TableHead>\n                    <TableHead>Stock</TableHead>\n                    <TableHead>Statut</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {products.map((product) => (\n                    <TableRow key={product.id} data-testid={`row-product-${product.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <img\n                            src={product.imageUrl}\n                            alt={product.name}\n                            className=\"w-10 h-10 rounded object-cover\"\n                            data-testid={`img-product-${product.id}`}\n                          />\n                          <div>\n                            <div className=\"font-medium\" data-testid={`text-product-name-${product.id}`}>\n                              {product.name}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">{product.description}</div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell data-testid={`text-product-price-${product.id}`}>\n                        {formatPrice(product.price)}\n                      </TableCell>\n                      <TableCell data-testid={`text-product-stock-${product.id}`}>\n                        {product.stock || 0}\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={product.isActive ? \"default\" : \"secondary\"}\n                          className={product.isActive ? \"bg-green-100 text-green-800\" : \"\"}\n                          data-testid={`badge-product-status-${product.id}`}\n                        >\n                          {product.isActive ? \"Actif\" : \"Inactif\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(product)}\n                            data-testid={`button-edit-${product.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(product.id)}\n                            className=\"text-red-600 hover:text-red-800\"\n                            data-testid={`button-delete-${product.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Product Form Modal */}\n      <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-product-form\">\n          <DialogHeader>\n            <DialogTitle data-testid=\"text-modal-title\">\n              {editingProduct ? \"Modifier le produit\" : \"Ajouter un produit\"}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"form-product\">\n            <div>\n              <Label htmlFor=\"name\">Nom du produit *</Label>\n              <Input\n                id=\"name\"\n                required\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                className=\"mt-1\"\n                data-testid=\"input-product-name\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description || \"\"}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                className=\"mt-1\"\n                rows={3}\n                data-testid=\"textarea-product-description\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"price\">Prix (DA) *</Label>\n              <Input\n                id=\"price\"\n                type=\"number\"\n                step=\"0.01\"\n                required\n                value={formData.price || \"\"}\n                onChange={(e) => setFormData(prev => ({ ...prev, price: e.target.value }))}\n                className=\"mt-1\"\n                data-testid=\"input-product-price\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"imageUrl\">URL de l'image *</Label>\n              <Input\n                id=\"imageUrl\"\n                type=\"url\"\n                required\n                value={formData.imageUrl}\n                onChange={(e) => setFormData(prev => ({ ...prev, imageUrl: e.target.value }))}\n                className=\"mt-1\"\n                placeholder=\"https://images.unsplash.com/...\"\n                data-testid=\"input-product-image\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"category\">CatÃ©gorie</Label>\n              <Select\n                value={formData.category || \"\"}\n                onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}\n              >\n                <SelectTrigger className=\"mt-1\" data-testid=\"select-product-category\">\n                  <SelectValue placeholder=\"SÃ©lectionner une catÃ©gorie\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"home\">Home</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Additional Images */}\n            <div>\n              <Label>Images supplÃ©mentaires</Label>\n              <div className=\"mt-2 space-y-2\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    placeholder=\"URL de l'image\"\n                    value={newImageUrl}\n                    onChange={(e) => setNewImageUrl(e.target.value)}\n                    data-testid=\"input-new-image\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      if (newImageUrl.trim()) {\n                        setFormData(prev => ({\n                          ...prev,\n                          images: [...(prev.images || []), newImageUrl.trim()]\n                        }));\n                        setNewImageUrl(\"\");\n                      }\n                    }}\n                    data-testid=\"button-add-image\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                {formData.images && formData.images.length > 0 && (\n                  <div className=\"grid grid-cols-2 gap-2\" data-testid=\"list-images\">\n                    {formData.images.map((image, index) => (\n                      <div key={index} className=\"relative group border rounded-lg p-2\">\n                        <img\n                          src={image}\n                          alt={`Image ${index + 1}`}\n                          className=\"w-full h-20 object-cover rounded\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute top-1 right-1 p-1 bg-red-500 text-white hover:bg-red-600 opacity-0 group-hover:opacity-100 transition-opacity\"\n                          onClick={() => {\n                            setFormData(prev => ({\n                              ...prev,\n                              images: prev.images?.filter((_, i) => i !== index) || []\n                            }));\n                          }}\n                          data-testid={`button-remove-image-${index}`}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Sizes */}\n            <div>\n              <Label>Tailles disponibles</Label>\n              <div className=\"mt-2 space-y-2\">\n                <div className=\"flex space-x-2\">\n                  <Select value={newSize} onValueChange={setNewSize}>\n                    <SelectTrigger data-testid=\"select-new-size\">\n                      <SelectValue placeholder=\"SÃ©lectionner une taille\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"XS\">XS</SelectItem>\n                      <SelectItem value=\"S\">S</SelectItem>\n                      <SelectItem value=\"M\">M</SelectItem>\n                      <SelectItem value=\"L\">L</SelectItem>\n                      <SelectItem value=\"XL\">XL</SelectItem>\n                      <SelectItem value=\"XXL\">XXL</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      if (newSize && !formData.sizes?.includes(newSize)) {\n                        setFormData(prev => ({\n                          ...prev,\n                          sizes: [...(prev.sizes || []), newSize]\n                        }));\n                        setNewSize(\"\");\n                      }\n                    }}\n                    data-testid=\"button-add-size\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                {formData.sizes && formData.sizes.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2\" data-testid=\"list-sizes\">\n                    {formData.sizes.map((size, index) => (\n                      <Badge\n                        key={index}\n                        variant=\"secondary\"\n                        className=\"flex items-center space-x-1\"\n                      >\n                        <span>{size}</span>\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            setFormData(prev => ({\n                              ...prev,\n                              sizes: prev.sizes?.filter((_, i) => i !== index) || []\n                            }));\n                          }}\n                          className=\"ml-1 hover:text-red-500\"\n                          data-testid={`button-remove-size-${index}`}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Colors */}\n            <div>\n              <Label>Couleurs disponibles</Label>\n              <div className=\"mt-2 space-y-2\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    placeholder=\"Nom de la couleur (ex: Rouge, Bleu)\"\n                    value={newColor}\n                    onChange={(e) => setNewColor(e.target.value)}\n                    data-testid=\"input-new-color\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      if (newColor.trim() && !formData.colors?.includes(newColor.trim())) {\n                        setFormData(prev => ({\n                          ...prev,\n                          colors: [...(prev.colors || []), newColor.trim()]\n                        }));\n                        setNewColor(\"\");\n                      }\n                    }}\n                    data-testid=\"button-add-color\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                {formData.colors && formData.colors.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2\" data-testid=\"list-colors\">\n                    {formData.colors.map((color, index) => (\n                      <Badge\n                        key={index}\n                        variant=\"secondary\"\n                        className=\"flex items-center space-x-1\"\n                      >\n                        <span>{color}</span>\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            setFormData(prev => ({\n                              ...prev,\n                              colors: prev.colors?.filter((_, i) => i !== index) || []\n                            }));\n                          }}\n                          className=\"ml-1 hover:text-red-500\"\n                          data-testid={`button-remove-color-${index}`}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"stock\">Stock</Label>\n              <Input\n                id=\"stock\"\n                type=\"number\"\n                min=\"0\"\n                value={formData.stock || 0}\n                onChange={(e) => setFormData(prev => ({ ...prev, stock: parseInt(e.target.value) || 0 }))}\n                className=\"mt-1\"\n                data-testid=\"input-product-stock\"\n              />\n            </div>\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                type=\"submit\"\n                className=\"flex-1 bg-primary hover:bg-primary-dark\"\n                disabled={createProductMutation.isPending || updateProductMutation.isPending}\n                data-testid=\"button-save-product\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                {editingProduct ? \"Modifier\" : \"Ajouter\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleCloseModal}\n                data-testid=\"button-cancel-product\"\n              >\n                Annuler\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":21188},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/product.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ShoppingCart, ArrowLeft, Heart, Truck, Shield, RotateCcw } from \"lucide-react\";\nimport { cartManager } from \"@/lib/cart\";\nimport { CartState } from \"@/types\";\nimport { Product } from \"@shared/schema\";\n\nexport default function ProductPage() {\n  const [, params] = useRoute(\"/product/:id\");\n  const [cartState, setCartState] = useState<CartState>(cartManager.getState());\n  const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n  const [selectedSize, setSelectedSize] = useState(\"\");\n  const [selectedColor, setSelectedColor] = useState(\"\");\n\n  const { data: product, isLoading } = useQuery<Product>({\n    queryKey: [\"/api/products\", params?.id],\n    enabled: !!params?.id,\n  });\n\n  useEffect(() => {\n    const unsubscribe = cartManager.subscribe(setCartState);\n    return unsubscribe;\n  }, []);\n\n  const handleAddToCart = () => {\n    if (product) {\n      cartManager.addItem({\n        id: product.id,\n        name: `${product.name}${selectedSize ? ` - ${selectedSize}` : \"\"}${selectedColor ? ` - ${selectedColor}` : \"\"}`,\n        price: `${product.price} DA`,\n        imageUrl: product.imageUrl,\n      });\n    }\n  };\n\n  const formatPrice = (price: string) => {\n    const numPrice = parseFloat(price);\n    return `${numPrice.toLocaleString()} DA`;\n  };\n\n  const availableImages = product ? [product.imageUrl, ...(product.images || [])] : [];\n  const isOutOfStock = !product?.stock || product.stock <= 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Navigation */}\n        <nav className=\"bg-white shadow-sm sticky top-0 z-50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between items-center h-16\">\n              <div className=\"flex items-center\">\n                <span className=\"text-2xl font-bold text-primary\">Pix Store DZ</span>\n              </div>\n              <Button \n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"relative\"\n                onClick={() => window.history.back()}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"h-5 w-5 mr-2\" />\n                Retour\n              </Button>\n            </div>\n          </div>\n        </nav>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Chargement du produit...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Navigation */}\n        <nav className=\"bg-white shadow-sm sticky top-0 z-50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between items-center h-16\">\n              <div className=\"flex items-center\">\n                <span className=\"text-2xl font-bold text-primary\">Pix Store DZ</span>\n              </div>\n              <Button \n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"relative\"\n                onClick={() => window.history.back()}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"h-5 w-5 mr-2\" />\n                Retour\n              </Button>\n            </div>\n          </div>\n        </nav>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Produit non trouvÃ©</h1>\n            <p className=\"text-gray-600 mb-8\">Le produit que vous recherchez n'existe pas ou n'est plus disponible.</p>\n            <Button onClick={() => window.location.href = \"/\"}>\n              Retour Ã  l'accueil\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation */}\n      <nav className=\"bg-white shadow-sm sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <span className=\"text-2xl font-bold text-primary\">Pix Store DZ</span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"relative\"\n                onClick={() => window.history.back()}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"h-5 w-5 mr-2\" />\n                Retour\n              </Button>\n              <Button \n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"relative\"\n                onClick={() => window.location.href = \"/\"}\n                data-testid=\"button-cart\"\n              >\n                <ShoppingCart className=\"h-5 w-5\" />\n                {cartState.itemCount > 0 && (\n                  <Badge \n                    className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 flex items-center justify-center bg-primary text-white text-xs\"\n                    data-testid=\"text-cart-count\"\n                  >\n                    {cartState.itemCount}\n                  </Badge>\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Product Details */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"lg:grid lg:grid-cols-2 lg:gap-x-8 lg:items-start\">\n          {/* Product Images */}\n          <div className=\"flex flex-col-reverse\">\n            {/* Image Gallery */}\n            <div className=\"mx-auto mt-6 w-full max-w-2xl sm:block lg:max-w-none\">\n              <div className=\"grid grid-cols-4 gap-6\" aria-orientation=\"horizontal\">\n                {availableImages.map((image, index) => (\n                  <button\n                    key={index}\n                    className={`relative flex h-24 cursor-pointer items-center justify-center rounded-md text-sm font-medium uppercase hover:bg-gray-50 focus:outline-none focus:ring focus:ring-opacity-50 focus:ring-offset-4 ${\n                      index === selectedImageIndex\n                        ? \"ring-2 ring-primary\"\n                        : \"ring-1 ring-gray-200\"\n                    }`}\n                    onClick={() => setSelectedImageIndex(index)}\n                    data-testid={`button-image-${index}`}\n                  >\n                    <span className=\"sr-only\">Image {index + 1}</span>\n                    <span className=\"absolute inset-0 overflow-hidden rounded-md\">\n                      <img\n                        src={image}\n                        alt={`${product.name} ${index + 1}`}\n                        className=\"h-full w-full object-cover object-center\"\n                      />\n                    </span>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Main Image */}\n            <div className=\"w-full aspect-square\">\n              <img\n                src={availableImages[selectedImageIndex]}\n                alt={product.name}\n                className=\"h-full w-full object-cover object-center sm:rounded-lg\"\n                data-testid=\"img-main-product\"\n              />\n            </div>\n          </div>\n\n          {/* Product Info */}\n          <div className=\"mt-10 px-4 sm:mt-16 sm:px-0 lg:mt-0\">\n            <h1 className=\"text-3xl font-bold tracking-tight text-gray-900\" data-testid=\"text-product-name\">\n              {product.name}\n            </h1>\n\n            <div className=\"mt-3\">\n              <p className=\"text-3xl tracking-tight text-primary font-bold\" data-testid=\"text-product-price\">\n                {formatPrice(product.price)}\n              </p>\n            </div>\n\n            {/* Description */}\n            <div className=\"mt-6\">\n              <h3 className=\"sr-only\">Description</h3>\n              <div className=\"text-base text-gray-700\" data-testid=\"text-product-description\">\n                <p>{product.description || \"Description non disponible\"}</p>\n              </div>\n            </div>\n\n            {/* Size Selection */}\n            {product.sizes && product.sizes.length > 0 && (\n              <div className=\"mt-8\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-sm font-medium text-gray-900\">Taille</h3>\n                </div>\n                <Select value={selectedSize} onValueChange={setSelectedSize}>\n                  <SelectTrigger className=\"mt-2\" data-testid=\"select-product-size\">\n                    <SelectValue placeholder=\"SÃ©lectionner une taille\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {product.sizes.map((size) => (\n                      <SelectItem key={size} value={size}>\n                        {size}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Color Selection */}\n            {product.colors && product.colors.length > 0 && (\n              <div className=\"mt-8\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-sm font-medium text-gray-900\">Couleur</h3>\n                </div>\n                <Select value={selectedColor} onValueChange={setSelectedColor}>\n                  <SelectTrigger className=\"mt-2\" data-testid=\"select-product-color\">\n                    <SelectValue placeholder=\"SÃ©lectionner une couleur\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {product.colors.map((color) => (\n                      <SelectItem key={color} value={color}>\n                        {color}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Stock Status */}\n            <div className=\"mt-6\">\n              {isOutOfStock ? (\n                <Badge variant=\"destructive\" className=\"text-sm\">\n                  Rupture de stock\n                </Badge>\n              ) : (\n                <Badge variant=\"default\" className=\"bg-green-100 text-green-800 text-sm\">\n                  En stock ({product.stock || 0} disponible{(product.stock || 0) > 1 ? 's' : ''})\n                </Badge>\n              )}\n            </div>\n\n            {/* Add to Cart */}\n            <div className=\"mt-10 flex sm:flex-col1\">\n              <Button\n                onClick={handleAddToCart}\n                disabled={isOutOfStock}\n                className=\"max-w-xs flex-1 bg-primary border border-transparent rounded-md py-3 px-8 flex items-center justify-center text-base font-medium text-white hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:w-full\"\n                data-testid=\"button-add-to-cart\"\n              >\n                <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                {isOutOfStock ? \"Rupture de stock\" : \"Ajouter au panier\"}\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                className=\"ml-4 py-3 px-3 rounded-md flex items-center justify-center text-gray-400 hover:bg-gray-100 hover:text-gray-500\"\n                data-testid=\"button-favorite\"\n              >\n                <Heart className=\"h-6 w-6\" />\n                <span className=\"sr-only\">Ajouter aux favoris</span>\n              </Button>\n            </div>\n\n            {/* Features */}\n            <section className=\"mt-12 pt-12 border-t border-gray-200\">\n              <h3 className=\"text-sm font-medium text-gray-900 mb-4\">Avantages</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start\">\n                  <Truck className=\"h-5 w-5 text-primary mt-1 mr-3\" />\n                  <div>\n                    <h4 className=\"text-sm font-medium text-gray-900\">Livraison dans toute l'AlgÃ©rie</h4>\n                    <p className=\"text-sm text-gray-500\">Livraison rapide dans les 58 wilayas</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <Shield className=\"h-5 w-5 text-primary mt-1 mr-3\" />\n                  <div>\n                    <h4 className=\"text-sm font-medium text-gray-900\">QualitÃ© garantie</h4>\n                    <p className=\"text-sm text-gray-500\">Produits de qualitÃ© premium</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <RotateCcw className=\"h-5 w-5 text-primary mt-1 mr-3\" />\n                  <div>\n                    <h4 className=\"text-sm font-medium text-gray-900\">Ã‰change facile</h4>\n                    <p className=\"text-sm text-gray-500\">Retour et Ã©change sous 7 jours</p>\n                  </div>\n                </div>\n              </div>\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13586}},"version":1}